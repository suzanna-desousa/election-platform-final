/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/n5PcaL2qzZg
 */
 "use client";
 import { CardTitle, CardDescription, CardContent, CardFooter, Card } from "@/components/ui/card"
 import { Button } from "@/components/ui/button"
 import { Header } from "@/components/shared/header"
 import Image from 'next/image';
 import { collection, doc, getDocs, updateDoc, query, where } from 'firebase/firestore';
import { auth, db } from '@/app/firebase/config';
import { useEffect, useState } from "react";
import { onAuthStateChanged, signOut, User } from "firebase/auth";
import router from "next/router";
 
interface Candidate {
  id: string;
  name: string;
  image: string;
  votes: number;

}

const getCandidatesData = async () => {
  try {
    const candidatesCollection = collection(db, 'candidates');
    const querySnapshot = await getDocs(candidatesCollection);

    // Extract data from each document
    const candidatesData = querySnapshot.docs.map((doc) => ({
      id: doc.id,
      name: doc.data().name,
      image: doc.data().image,
      votes: doc.data().votes,
    }));

    return candidatesData;
  } catch (error) {
    console.error('Error fetching candidates data:');
    return [];
  }
};

 export function Vote() {

   const [candidates, setCandidates] = useState<Candidate[]>([]);
   const [loading, setLoading] = useState(true);
   const [user, setUser] = useState<User | null>(null);

   useEffect(() => {
    const fetchData = async () => {
      const candidatesData = await getCandidatesData();
      setCandidates(candidatesData);
    };

    fetchData();

    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user);
    });

    return () => {
      // Unsubscribe the observer when the component unmounts
      unsubscribe();
    };
    
  }, []);
  
    const handleVoteClick = async (candidateId: string) => {
   
      try {

        if (!user) {
          console.error('User not authenticated.');
          return;
        }

        console.log('Current user:', user.uid);
        // Update the votes for the candidate in Firestore
        const candidateRef = doc(db, 'candidates', candidateId);
        const foundCandidate = candidates.find((candidate) => candidate.id === candidateId);

        if (foundCandidate) {
          await updateDoc(candidateRef, {
            votes: foundCandidate.votes + 1,
          });
        } 

        // Update the local state to reflect the new vote count
        setCandidates((prevCandidates) =>
          prevCandidates.map((candidate) =>
            candidate.id === candidateId
              ? { ...candidate, votes: candidate.votes + 1 }
              : candidate
          )
        );

        // Assuming user is the Firebase Authentication user object
        const email = user.email;

        try {
          const querySnapshot = await getDocs(query(collection(db, 'users'), where('email', '==', email)));
          
          if (!querySnapshot.empty) {
            // Assuming there is only one document for a given email
            const userDocSnapshot = querySnapshot.docs[0];
            const firestoreUid = userDocSnapshot.id;
            const userDocRef = doc(db, 'users', firestoreUid);

            try {
              await updateDoc(userDocRef, {
                voted: true,
              });

              alert('Vote successful!');
              signOut(auth).then(() => {
                alert("You have been signed out.")
              }).catch((error) => {
                // An error happened.
              });
              //router.push('/');
              window.location.href = '/';

            } catch (error) {
              console.error('Error updating voted status:', error);
              // Check the error message for more details
            }

          } else {
            console.error('User document not found in Firestore for email:', email);
          }
        } catch (error) {
          console.error('Error fetching user document from Firestore:', error);
        }

      } catch (error) {
        console.error('Error updating votes:');
      }

  };

   
  return (
    <div>
      <Header />
      <div className="bg-gray-1000 py-12">
        <div className="container px-4">
          <div className="grid gap-6 md:gap-8 lg:gap-12 grid-cols-1 md:grid-cols-3 items-start">
            {candidates.map((candidate) => (
              <Card key={candidate.id}>
                <div className="flex flex-col h-full">
                  <CardContent className="flex-1">
                    <div className="flex justify-center items-center h-[200px]">
                      <Image
                        alt="Image"
                        className="rounded-full"
                        height="150"
                        src={candidate.image}
                        style={{
                          aspectRatio: "150/150",
                          objectFit: "cover",
                        }}
                        width="150"
                      />
                    </div>
                    <div className="text-center pt-4 pb-2">
                      <CardTitle>{candidate.name}</CardTitle>
                      <CardDescription>{`Votes: ${candidate.votes}`}</CardDescription>
                    </div>
                  </CardContent>
                  <CardFooter className="flex justify-center">
                    <Button
                      className="w-1/2 bg-black text-white"
                      variant="outline"
                      onClick={() => handleVoteClick(candidate.id)}
                    >
                      Vote
                    </Button>
                  </CardFooter>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
 }
 export default Vote;